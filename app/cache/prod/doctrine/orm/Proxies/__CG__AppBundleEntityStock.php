<?php

namespace Proxies\__CG__\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Stock extends \AppBundle\Entity\Stock implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'stock_id', 'stock_name', 'buy_date', 'position', 'buying_price', 'current_price', 'note', 'user');
        }

        return array('__isInitialized__', 'id', 'stock_id', 'stock_name', 'buy_date', 'position', 'buying_price', 'current_price', 'note', 'user');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Stock $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getStockId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStockId', array());

        return parent::getStockId();
    }

    /**
     * {@inheritDoc}
     */
    public function setStockId($stock_id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStockId', array($stock_id));

        return parent::setStockId($stock_id);
    }

    /**
     * {@inheritDoc}
     */
    public function getStockName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStockName', array());

        return parent::getStockName();
    }

    /**
     * {@inheritDoc}
     */
    public function setStockName($stock_name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStockName', array($stock_name));

        return parent::setStockName($stock_name);
    }

    /**
     * {@inheritDoc}
     */
    public function getBuyDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBuyDate', array());

        return parent::getBuyDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setBuyDate(\DateTime $date = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBuyDate', array($date));

        return parent::setBuyDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getPosition()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPosition', array());

        return parent::getPosition();
    }

    /**
     * {@inheritDoc}
     */
    public function setPosition($position)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPosition', array($position));

        return parent::setPosition($position);
    }

    /**
     * {@inheritDoc}
     */
    public function getNote()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNote', array());

        return parent::getNote();
    }

    /**
     * {@inheritDoc}
     */
    public function setNote($note)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNote', array($note));

        return parent::setNote($note);
    }

    /**
     * {@inheritDoc}
     */
    public function getBuyingPrice()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBuyingPrice', array());

        return parent::getBuyingPrice();
    }

    /**
     * {@inheritDoc}
     */
    public function setBuyingPrice($buying_price)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBuyingPrice', array($buying_price));

        return parent::setBuyingPrice($buying_price);
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrentPrice()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCurrentPrice', array());

        return parent::getCurrentPrice();
    }

    /**
     * {@inheritDoc}
     */
    public function setCurrentPrice($current_price)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCurrentPrice', array($current_price));

        return parent::setCurrentPrice($current_price);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', array());

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\AppBundle\Entity\User $user = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', array($user));

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function calculateProfitAndLoss()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'calculateProfitAndLoss', array());

        return parent::calculateProfitAndLoss();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', array());

        return parent::__toString();
    }

}
